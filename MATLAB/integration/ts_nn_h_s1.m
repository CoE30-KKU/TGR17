function [y1,xf1] = ts_nn_h_s1(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 24-Nov-2023 09:27:10.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   xi1 = 1x2 matrix, initial 2 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 1x2 matrix, final 2 delay states for input #1.
% where TS is the number of timesteps.a

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 111.09;
x1_step1.gain = 0.294985250737463;
x1_step1.ymin = -1;

% Layer 1
b1 = [2.9111364824032985865;-1.7914350967055316932;0.20215055328306702487;-0.58837175361370652737;1.8937860934540096114;-3.3570501853740561948];
IW1_1 = [-3.1410599787191548771 -0.041395176899281987959;2.5717420201039984384 2.1238038858085248606;-1.9916569763979754537 3.3959985295622652224;-0.96761883507080737044 -2.0382975746266072115;2.3744431805156298587 1.9219401398521704927;-2.695438938853759403 -1.2821919372784738034];

% Layer 2
b2 = 0.13397240590193187915;
LW2_1 = [-0.35555351142355551275 0.33494154053799263249 -0.52915031109018662026 -0.64154982848207553481 0.03351117243569522175 -0.25795930961636187595];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.294985250737463;
y1_step1.xoffset = 111.09;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS

    % Rotating delay state position
    xdts = mod(ts+1,3)+1;

    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);

    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);

    % Layer 2
    a2 = b2 + LW2_1*a1;

    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
