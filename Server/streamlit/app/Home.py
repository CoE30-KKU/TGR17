from collections import namedtuple
import altair as alt
import math
import pandas as pd
import streamlit as st
import streamlit.components.v1 as components
import streamlit
import plotly.express as px
import pymongo
import time
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import requests

st.set_page_config(page_title="Water Data",
                    page_icon=":bar_chart:",
                    layout="wide")

# ---- DATABASE ----
MONGODB_CONN = "mongodb://TGR_GROUP30:NJ485O@mongoDB:27017"
@st.cache_resource
def init_conn():
    return pymongo.MongoClient(MONGODB_CONN)

mongo_client = init_conn()

data = list()
pd_data = list()

df = pd.DataFrame()
pd_df = pd.DataFrame()

# @st.cache_data(ttl=300)
def get_water_data() -> list:
    global data, df, pd_data, pd_df
    data = list(mongo_client["TGR2023"]["water_data"].find())
    pd_data = list(mongo_client["TGR2023"]["predict_water_data"].find())

    df = pd.DataFrame(data)
    pd_df = pd.DataFrame(pd_data)

get_water_data()
# ---- DATABASE ----
col000, col001, col002 = st.columns([4,8,4])
with col000:
    st.title("")
with col001:
    st.image("SEE-IT.png", use_column_width=True)
with col002:
    st.title("")
st.write("<center><h1>‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥</h1></center>", unsafe_allow_html=True)
col00, col01, col02 = st.columns([4,8,4])
with col00:
    st.title("")
with col01:
    bt = st.button("[Hardware] Detect Current Water Level", use_container_width=True)
    if bt:
        try:
            r = requests.get("http://192.168.1.98/mqtt/command")
            st.toast("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Hardware ‡πÅ‡∏•‡πâ‡∏ß")
            st.balloons()
        except:
            st.toast("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            st.snow()
with col02:
    st.title("")

selectable_list = df["name"].unique().tolist() if "name" in df.columns else ["- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -"]
station = st.selectbox(label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥",
    options=selectable_list,index=0,
    key="aaa"
)

st.sidebar.image("TESA.png", use_column_width=True)
st.sidebar.image("SEE-IT_BG.png", use_column_width=True)
st.sidebar.image("Embed.png", use_column_width=True)


cont,cont2,cont3 = st.empty(), st.empty(), st.empty()
# cont4 = st.empty()

while True:
    get_water_data()
    if (station != "‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" and station != "- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -"):
        df = df.query(
            "name == @station"
        )
        if not pd_df.empty:
            pd_df = pd_df.query(
                "name == @station"
            )
    selectable_list = df["name"].unique().tolist() if "name" in df.columns else ["- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -"]
    with cont.container():
        dfm = df.values.tolist()
        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        col1, col2, col3 = st.columns(3)
        if not len(dfm):
            with col1:
                st.metric("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥", value="- ‡πÄ‡∏°‡∏ï‡∏£", delta="-")
            with col2:
                st.metric("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•", value="- ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥", delta="-")
            with col3:
                st.metric("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", value="----/--/-- --:--")
            # with cont4.container():
            #     st.warning('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Database, ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡πÉ‡∏ô Database `water_data` ‡∏Å‡πà‡∏≠‡∏ô')
        else:
            latest = dfm[-1]
            pre_latest = (dfm[-2] if len(dfm) > 1 else {3: 0, 4: 0, 5: 0})
            with col1:
                level_key = 3 #"height"
                level_delta = latest[level_key]-pre_latest[level_key]
                latest_level = latest[level_key]
                st.metric("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥", value=f"{latest_level:.2f} ‡πÄ‡∏°‡∏ï‡∏£", delta=f"{level_delta:.2f} ‡πÄ‡∏°‡∏ï‡∏£")
            with col2:
                discharge_key = 4 #"discharge_rate"
                discharge_delta = latest[discharge_key]-pre_latest[discharge_key]
                latest_discharge = latest[discharge_key]
                st.metric("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•", value=f"{latest_discharge:.2f} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥", delta=f"{discharge_delta:.2f} ‡πÄ‡∏°‡∏ï‡∏£")
            with col3:
                time_key = 5 #"time"
                dateandtime = datetime.utcfromtimestamp(latest[time_key]) + timedelta(hours=7)
                st.metric("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", value=f"{dateandtime.strftime('%Y/%m/%d %H:%M')}")
    with cont2.container():
        if len(dfm):
            # st.write("<hr>", unsafe_allow_html=True)
            st.subheader("‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥")
            col11, col12 = st.columns(2)
            with col11:
                st.metric("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ô‡πâ‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", value=f"{df['height'].mean():.2f} ‡πÄ‡∏°‡∏ï‡∏£")
            with col12:
                st.metric("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", value=f"{df['discharge_rate'].mean():.2f} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥")
            b_df = df
            b_pd_df = pd_df
            b_df["Flag"] = "Actual"
            b_pd_df["Flag"] = "Forecast"

            ndf = pd.concat([b_df, b_pd_df])
            fig = px.line(ndf, x="day", y="height", color="Flag", color_discrete_map={'Actual': 'blue', 'Forecast': 'lightblue'}, line_dash_map={'Actual': 'none', 'Forecast': 'dash'})

            st.plotly_chart(fig, use_container_width=True)

            ddd = df.copy()
            ddd.drop(columns=["_id", "time", "Flag"], inplace=True)
            ddd.rename(columns={"height": "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ (‡∏°.)", "discharge_rate": "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏• (‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥)", "day": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "name":"‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ"}, inplace=True)
            ddd.set_index("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", inplace=True)


            nddd = pd.DataFrame({
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": df["day"],
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ": df["name"],
                "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ (‡∏°.)": df["height"],
                "‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥": df["height"].diff().apply(
                    lambda x: 'üî∫ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô' if x > 0 else ('üü¢ ‡∏•‡∏î‡∏•‡∏á' if x < 0 else 'üî∏ ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà')
                ),
                "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏• (‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥)": df["discharge_rate"],
                "‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•": df["discharge_rate"].diff().apply(
                    lambda x: 'üî∫ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô' if x > 0 else ('üü¢ ‡∏•‡∏î‡∏•‡∏á' if x < 0 else 'üî∏ ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà')
                ),
            })
            nddd.set_index("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", inplace=True)
            st.dataframe(nddd.sort_values(by=['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'], ascending=False), use_container_width=True, height=500)
    time.sleep(1)
